<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lelelover.github.io</id>
    <title>阿元的blog</title>
    <updated>2019-11-27T13:59:00.564Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lelelover.github.io"/>
    <link rel="self" href="https://lelelover.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://lelelover.github.io/images/avatar.png</logo>
    <icon>https://lelelover.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 阿元的blog</rights>
    <entry>
        <title type="html"><![CDATA[linux下GDB调试]]></title>
        <id>https://lelelover.github.io/post/linux-xia-gdb-diao-shi</id>
        <link href="https://lelelover.github.io/post/linux-xia-gdb-diao-shi">
        </link>
        <updated>2019-11-27T13:57:30.000Z</updated>
        <content type="html"><![CDATA[<h6 id="gdb的使用">GDB的使用</h6>
<p>编译代码添加符号表<br>
GCC -g -o xxxx.obj xxxx.c xxx.c<br>
xxxx.obj是符号表既汇编生成目标文件，</p>
<p>加上-g 选项，会保留代码的文字信息</p>
<p>gbd中使用run是全速运行，使用start是一步一步执行。<br>
程序正在运行时，使用</p>
<pre><code>gdb -p pid
</code></pre>
<p>使程序暂停，要使用PID号<br>
也可以用在gdb中使用</p>
<pre><code>attach pid
</code></pre>
<p>如果函数需要传入参数，则在调试时(gdb界面)，使用 一下 命令实现。</p>
<pre><code>run 参数1 参数2
</code></pre>
<p>以下可以使调试界面分为代码界面和gdb调试界面</p>
<pre><code>gbd -tui  (可执行文件名)
</code></pre>
<p>cgdb程序也是可以的，但需要独立安装。</p>
<p>gdb界面，使用step函数命令去执行函数里的内容。</p>
<h6 id="gdb命令">GDB命令</h6>
<ul>
<li>禁止断点</li>
</ul>
<pre><code>disable b1
</code></pre>
<ul>
<li>使能断点</li>
</ul>
<pre><code>enable b2
</code></pre>
<ul>
<li>条件判断</li>
</ul>
<p>用法：break [break-args] if (condition)</p>
<p>例如：</p>
<p>​	break main if argc &gt; 1<br>
​	break 180 if (string == NULL &amp;&amp; i &lt; 0)<br>
​	break test.c:34 if (x &amp; y) == 1<br>
​	break myfunc if i % (j + 3) != 0<br>
​	break 44 if strlen(mystring) == 0</p>
<ul>
<li>监视点(watch)</li>
</ul>
<p>用法：watch i</p>
<p>当i的值发生变化时，程序停下来。</p>
<p>watch i &gt; 999</p>
<p>一旦i &gt; 999，程序就会被中断，GDB指出改变条件的代码。</p>
<ul>
<li>
<p>显示数据</p>
<p>具体使用如下</p>
<ul>
<li>print   变量</li>
<li>p  *指针</li>
<li>p  &amp;变量
<ul>
<li>查看变量地址</li>
</ul>
</li>
</ul>
</li>
<li>
<p>显示内存</p>
<ul>
<li>x   /Nuf  exprerssion
<ul>
<li>n表示显示的个数</li>
<li>u表示显示的单位
<ul>
<li>b    单字节 ；h    双字节；w    四字节；g	8字节</li>
</ul>
</li>
<li>f对应格式
<ul>
<li>x 16进制；d有符号10进制；u无符号10进制；c字符</li>
</ul>
</li>
<li>expression   显示内存的地址</li>
</ul>
</li>
</ul>
</li>
<li>
<p>修改变量</p>
<p>使用方法如下：</p>
<p>set  var  i=32</p>
</li>
<li>
<p>执行</p>
<ul>
<li>next/n</li>
<li>step</li>
<li>contiune/c</li>
</ul>
</li>
</ul>
<p>next表示跳往当前代码栈中的下一条指令，如果下一条指令是函数调用，并且函数中存在断点，则直接跑到该断点中止。</p>
<p>continue 表示跳往下一个断点， next和continue的区别是： 在当前代码堆栈中，step和next都会一条条的执行，而continue直接跑到下一个断点去执行去了。 如果当前代码中调用的是函数栈，则next和continue没有任何区别【直接跑到断点处中止】。</p>
<p>step 和next 在当前代码栈中相似，都是一条条语句执行，不同的是在函数栈调用时，next进入的方式直接跑到断点处中止(所以叫做&quot;下一个&quot;)，step是从函数栈的起始位置中止(所以叫做“单步”)。</p>
<ul>
<li>查看汇编
<ul>
<li>disass</li>
<li>display  /i $pc</li>
</ul>
</li>
<li>layout
<ul>
<li>layout src</li>
<li>layout asm</li>
<li>layout split</li>
<li>退出  ctrl+x  再按a</li>
</ul>
</li>
<li>多进程
<ul>
<li>set follow-fork-mode child/ parent</li>
</ul>
</li>
<li>多进程
<ul>
<li>info thread</li>
<li>thread xx</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://lelelover.github.io/post/hello-gridea</id>
        <link href="https://lelelover.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>