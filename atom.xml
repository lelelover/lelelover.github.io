<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lelelover.github.io</id>
    <title>阿元的blog</title>
    <updated>2019-11-27T14:16:28.715Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lelelover.github.io"/>
    <link rel="self" href="https://lelelover.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://lelelover.github.io/images/avatar.png</logo>
    <icon>https://lelelover.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 阿元的blog</rights>
    <entry>
        <title type="html"><![CDATA[linux下GDB调试]]></title>
        <id>https://lelelover.github.io/post/linux-xia-gdb-diao-shi</id>
        <link href="https://lelelover.github.io/post/linux-xia-gdb-diao-shi">
        </link>
        <updated>2019-11-27T13:57:30.000Z</updated>
        <summary type="html"><![CDATA[<p>#####GDB的使用<br>
编译代码添加符号表<br>
GCC -g -o xxxx.obj xxxx.c xxx.c<br>
xxxx.obj是符号表既汇编生成目标文件，</p>
]]></summary>
        <content type="html"><![CDATA[<p>#####GDB的使用<br>
编译代码添加符号表<br>
GCC -g -o xxxx.obj xxxx.c xxx.c<br>
xxxx.obj是符号表既汇编生成目标文件，</p>
<!-- more -->
<p>加上-g 选项，会保留代码的文字信息</p>
<p>gbd中使用run是全速运行，使用start是一步一步执行。<br>
程序正在运行时，使用</p>
<pre><code>gdb -p pid
</code></pre>
<p>使程序暂停，要使用PID号<br>
也可以用在gdb中使用</p>
<pre><code>attach pid
</code></pre>
<p>如果函数需要传入参数，则在调试时(gdb界面)，使用 一下 命令实现。</p>
<pre><code>run 参数1 参数2
</code></pre>
<p>以下可以使调试界面分为代码界面和gdb调试界面</p>
<pre><code>gbd -tui  (可执行文件名)
</code></pre>
<p>cgdb程序也是可以的，但需要独立安装。</p>
<p>gdb界面，使用step函数命令去执行函数里的内容。</p>
<h6 id="gdb命令">GDB命令</h6>
<ul>
<li>禁止断点</li>
</ul>
<pre><code>disable b1
</code></pre>
<ul>
<li>使能断点</li>
</ul>
<pre><code>enable b2
</code></pre>
<ul>
<li>条件判断</li>
</ul>
<p>用法：break [break-args] if (condition)</p>
<p>例如：</p>
<p>​	break main if argc &gt; 1<br>
​	break 180 if (string == NULL &amp;&amp; i &lt; 0)<br>
​	break test.c:34 if (x &amp; y) == 1<br>
​	break myfunc if i % (j + 3) != 0<br>
​	break 44 if strlen(mystring) == 0</p>
<ul>
<li>监视点(watch)</li>
</ul>
<p>用法：watch i</p>
<p>当i的值发生变化时，程序停下来。</p>
<p>watch i &gt; 999</p>
<p>一旦i &gt; 999，程序就会被中断，GDB指出改变条件的代码。</p>
<ul>
<li>
<p>显示数据</p>
<p>具体使用如下</p>
<p>print   变量<br>
p  *指针<br>
p  &amp;变量<br>
查看变量地址</p>
</li>
<li>
<p>显示内存<br>
x   /Nuf  exprerssion<br>
n表示显示的个数<br>
u表示显示的单位<br>
b    单字节 ；h    双字节；w    四字节；g	8字节<br>
f对应格式<br>
x 16进制；d有符号10进制；u无符号10进制；c字符<br>
expression   显示内存的地址</p>
</li>
<li>
<p>修改变量</p>
<p>使用方法如下：</p>
<p>set  var  i=32</p>
</li>
<li>
<p>执行</p>
<p>next/n<br>
step<br>
contiune/c</p>
</li>
</ul>
<p>next表示跳往当前代码栈中的下一条指令，如果下一条指令是函数调用，并且函数中存在断点，则直接跑到该断点中止。</p>
<p>continue 表示跳往下一个断点， next和continue的区别是： 在当前代码堆栈中，step和next都会一条条的执行，而continue直接跑到下一个断点去执行去了。 如果当前代码中调用的是函数栈，则next和continue没有任何区别【直接跑到断点处中止】。</p>
<p>step 和next 在当前代码栈中相似，都是一条条语句执行，不同的是在函数栈调用时，next进入的方式直接跑到断点处中止(所以叫做&quot;下一个&quot;)，step是从函数栈的起始位置中止(所以叫做“单步”)。</p>
<ul>
<li>查看汇编<br>
disass<br>
display  /i $pc<br>
layout<br>
layout src<br>
layout asm<br>
layout split<br>
退出  ctrl+x  再按a</li>
<li>多进程<br>
set follow-fork-mode child/ parent</li>
<li>多进程<br>
info thread<br>
thread xx</li>
</ul>
]]></content>
    </entry>
</feed>